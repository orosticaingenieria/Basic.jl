var documenterSearchIndex = {"docs":
[{"location":"test/","page":"8. Example","title":"8. Example","text":"EditURL = \"<unknown>/lit/test.jl\"","category":"page"},{"location":"test/#**8.**-Example","page":"8. Example","title":"8. Example","text":"","category":"section"},{"location":"test/","page":"8. Example","title":"8. Example","text":"(Image: ) (Image: )","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"This is an example generated with Literate based on this source file: example.jl. You are seeing the HTML-output which Documenter has generated based on a markdown file generated with Literate. The corresponding notebook can be viewed in nbviewer here: example.ipynb, and opened in binder here: example.ipynb, and the plain script output can be found here: example.jl.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"It is recommended to have the source file available when reading this, to better understand how the syntax in the source file corresponds to the output you are seeing.","category":"page"},{"location":"test/#Basic-syntax","page":"8. Example","title":"Basic syntax","text":"","category":"section"},{"location":"test/","page":"8. Example","title":"8. Example","text":"The basic syntax for Literate is simple, lines starting with # is interpreted as markdown, and all the other lines are interpreted as code. Here is some code:","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"x = 1//3\ny = 2//5","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"In markdown sections we can use markdown syntax. For example, we can write text in italic font, text in bold font and use links.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"It is possible to filter out lines depending on the output using the #md, #nb, #jl and #src tags (see Filtering lines):","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"This line starts with #md and is thus only visible in the markdown output.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"The source file is parsed in chunks of markdown and code. Starting a line with #- manually inserts a chunk break. For example, if we want to display the output of the following operations we may insert #- in between. These two code blocks will now end up in different @example-blocks in the markdown output, and two different notebook cells in the notebook output.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"x + y","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"x * y","category":"page"},{"location":"test/#Output-capturing","page":"8. Example","title":"Output capturing","text":"","category":"section"},{"location":"test/","page":"8. Example","title":"8. Example","text":"Code chunks are by default placed in Documenter @example blocks in the generated markdown. This means that the output will be captured in a block when Documenter is building the docs. In notebooks the output is captured in output cells, if the execute keyword argument is set to true. Output to stdout/stderr is also captured.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"note: Note\nNote that Documenter currently only displays output to stdout/stderr if there is no other result to show. Since the vector [1, 2, 3, 4] is returned from foo, the printing of \"This string is printed to stdout.\" is hidden.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"function foo()\n    println(\"This string is printed to stdout.\")\n    return [1, 2, 3, 4]\nend\n\nfoo()","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"Just like in the REPL, outputs ending with a semicolon hides the output:","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"1 + 1;\nnothing #hide","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"Both Documenter's @example block and notebooks can display images. Here is an example where we generate a simple plot using the Plots.jl package","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"using Plots\nx = range(0, stop=6Ï€, length=1000)\ny1 = sin.(x)\ny2 = cos.(x)\nplot(x, [y1, y2])","category":"page"},{"location":"test/#Custom-processing","page":"8. Example","title":"Custom processing","text":"","category":"section"},{"location":"test/","page":"8. Example","title":"8. Example","text":"It is possible to give Literate custom pre- and post-processing functions. For example, here we insert a placeholder value x = 123 in the source, and use a preprocessing function that replaces it with y = 321 in the rendered output.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"x = 123","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"In this case the preprocessing function is defined by","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"function pre(s::String)\n    s = replace(s, \"x = 123\" => \"y = 321\")\n    return s\nend","category":"page"},{"location":"test/#documenter-interaction","page":"8. Example","title":"Documenter.jl interaction","text":"","category":"section"},{"location":"test/","page":"8. Example","title":"8. Example","text":"In the source file it is possible to use Documenter.jl style references, such as @ref and @id. These will be filtered out in the notebook output. For example, here is a link, but it is only visible as a link if you are reading the markdown output. We can also use equations:","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"int_Omega nabla v cdot nabla u mathrmdOmega = int_Omega v f mathrmdOmega","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"using Documenters math syntax. Documenters syntax is automatically changed to \\begin{equation} ... \\end{equation} in the notebook output to display correctly.","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"","category":"page"},{"location":"test/","page":"8. Example","title":"8. Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Basic.jl","page":"Home","title":"Basic.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Basic.jl","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"EditURL = \"https://github.com/orosticaingenieria/Basic.jl/blob/master/docs/lit/example.jl\"","category":"page"},{"location":"example/#**8.**-Example","page":"Literate","title":"8. Example","text":"","category":"section"},{"location":"example/","page":"Literate","title":"Literate","text":"(Image: ) (Image: )","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"This is an example generated with Literate based on this source file: example.jl. You are seeing the HTML-output which Documenter has generated based on a markdown file generated with Literate. The corresponding notebook can be viewed in nbviewer here: example.ipynb, and opened in binder here: example.ipynb, and the plain script output can be found here: example.jl.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"It is recommended to have the source file available when reading this, to better understand how the syntax in the source file corresponds to the output you are seeing.","category":"page"},{"location":"example/#Basic-syntax","page":"Literate","title":"Basic syntax","text":"","category":"section"},{"location":"example/","page":"Literate","title":"Literate","text":"The basic syntax for Literate is simple, lines starting with # is interpreted as markdown, and all the other lines are interpreted as code. Here is some code:","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"x = 1//3\ny = 2//5","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"In markdown sections we can use markdown syntax. For example, we can write text in italic font, text in bold font and use links.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"It is possible to filter out lines depending on the output using the #md, #nb, #jl and #src tags (see Filtering lines):","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"This line starts with #md and is thus only visible in the markdown output.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"The source file is parsed in chunks of markdown and code. Starting a line with #- manually inserts a chunk break. For example, if we want to display the output of the following operations we may insert #- in between. These two code blocks will now end up in different @example-blocks in the markdown output, and two different notebook cells in the notebook output.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"x + y","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"x * y","category":"page"},{"location":"example/#Output-capturing","page":"Literate","title":"Output capturing","text":"","category":"section"},{"location":"example/","page":"Literate","title":"Literate","text":"Code chunks are by default placed in Documenter @example blocks in the generated markdown. This means that the output will be captured in a block when Documenter is building the docs. In notebooks the output is captured in output cells, if the execute keyword argument is set to true. Output to stdout/stderr is also captured.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"note: Note\nNote that Documenter currently only displays output to stdout/stderr if there is no other result to show. Since the vector [1, 2, 3, 4] is returned from foo, the printing of \"This string is printed to stdout.\" is hidden.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"function foo()\n    println(\"This string is printed to stdout.\")\n    return [1, 2, 3, 4]\nend\n\nfoo()","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"Just like in the REPL, outputs ending with a semicolon hides the output:","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"1 + 1;\nnothing #hide","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"Both Documenter's @example block and notebooks can display images. Here is an example where we generate a simple plot using the Plots.jl package","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"using Plots\nx = range(0, stop=6Ï€, length=1000)\ny1 = sin.(x)\ny2 = cos.(x)\nplot(x, [y1, y2])","category":"page"},{"location":"example/#Custom-processing","page":"Literate","title":"Custom processing","text":"","category":"section"},{"location":"example/","page":"Literate","title":"Literate","text":"It is possible to give Literate custom pre- and post-processing functions. For example, here we insert a placeholder value x = 123 in the source, and use a preprocessing function that replaces it with y = 321 in the rendered output.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"x = 123","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"In this case the preprocessing function is defined by","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"function pre(s::String)\n    s = replace(s, \"x = 123\" => \"y = 321\")\n    return s\nend","category":"page"},{"location":"example/#documenter-interaction","page":"Literate","title":"Documenter.jl interaction","text":"","category":"section"},{"location":"example/","page":"Literate","title":"Literate","text":"In the source file it is possible to use Documenter.jl style references, such as @ref and @id. These will be filtered out in the notebook output. For example, here is a link, but it is only visible as a link if you are reading the markdown output. We can also use equations:","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"int_Omega nabla v cdot nabla u mathrmdOmega = int_Omega v f mathrmdOmega","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"using Documenters math syntax. Documenters syntax is automatically changed to \\begin{equation} ... \\end{equation} in the notebook output to display correctly.","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"","category":"page"},{"location":"example/","page":"Literate","title":"Literate","text":"This page was generated using Literate.jl.","category":"page"}]
}
